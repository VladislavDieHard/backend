name: Build and Deploy

on:
  push:
    branches: [ dev, master ]
  pull_request:
    branches:
      - master
    types: [closed]

jobs:

#  build_and_publish:
#    if: github.event.pull_request.merged == true
#    runs-on: [ubuntu-latest]
#    env:
#      LOGIN: ${{ secrets.DOCKER_LOGIN }}
#    steps:
#      - name: Login to docker.io
#        run:  echo ${{ secrets.DOCKER_PASS }} | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
#      - uses: actions/checkout@master
#      - name: Build image
#        run: docker-compose build web
#      - name: Push image to docker.io
#        run: docker-compose push web

  deploy:
#    if: github.event.pull_request.merged == true
    runs-on: [ubuntu-latest]
#    needs: build_and_publish
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      - name: Adding Known Hosts
        run: ssh-keyscan -H -p 22024 ${{ secrets.DEPLOY_MACHINE_IP }} >> ~/.ssh/known_hosts

#      - name: Add and change docker remote context
#        run: docker context create remote --docker "host=ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_MACHINE_IP }}" &&
#          docker context use remote

      - name: docker ps
        run: ssh -p ${{ secrets.DEPLOY_MACHINE_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_MACHINE_IP }}

      - name: docker ps
        run: docker images

#      - name: 2
#        run: docker images

#      - name: Pull newer docker image
#        run: docker pull ${{ secrets.DOCKER_LOGIN }}/infomania_backend:latest
#
#      - name: Check container exists
#        id: check
#        run: OUTPUT=$(docker ps -q --filter "name=infomania_backend") &&
#          echo "::set-output name=OUTPUT::$OUTPUT"
#
#      - name: Remove old container
#        if: steps.check.outputs.OUTPUT != ''
#        run: docker rm -f -v $(echo | docker ps -q --filter "name=infomania_backend")
#
#      - name: Run new docker container
#        run: docker run --rm -d -p 3000:8080 --name infomania_backend vladdamage/infomania_backend:latest
#
#      - name: Clear unused images
#        run: echo y | docker image prune -a